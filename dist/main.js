/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/displayNewItems.js":
/*!********************************!*\
  !*** ./src/displayNewItems.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadMainContent\": () => (/* binding */ loadMainContent)\n/* harmony export */ });\nconst mainContainer = document.querySelector(`#main-content`);\n\nfunction loadMainContent(projectsArray, projectToLoad, tasksArray, pageToDisplay) {\n    while (mainContainer.firstChild) {\n        mainContainer.removeChild(mainContainer.firstChild)\n    }\n    if (pageToDisplay === `overview`) {\n        const containerToDisplay = displayTasksOverview(tasksArray);\n        mainContainer.appendChild(containerToDisplay);\n    } else if (pageToDisplay === `new project`) {\n        const containerToDisplay = displayProject(projectToLoad)\n        mainContainer.appendChild(containerToDisplay);\n    } else {\n        const containerToDisplay = displayExistingProject(projectToLoad, tasksArray)\n        mainContainer.appendChild(containerToDisplay);\n    }\n    projectButtonsAndSelectorsHandler(projectsArray)\n}\n\nfunction displayTasksOverview(arrayOfTaskObjects) {\n    const overviewContainer = document.createElement(`div`);\n    const overviewTitle = document.createElement(`h2`);\n    overviewTitle.textContent = `overview`;\n    overviewContainer.classList.add(`project-container`);\n    overviewContainer.appendChild(overviewTitle);\n    \n    const tasksToDisplay = displayTasks(arrayOfTaskObjects, overviewContainer)\n    \n    return tasksToDisplay\n}\n\nfunction displayTasks(arrayOfTaskObjects, container) {\n    const allTasksContainer = document.createElement(`div`);\n    allTasksContainer.classList.add(`project-tasks-container`);\n    \n    for (let i = 0; i < arrayOfTaskObjects.length; i++) {\n        const newTaskContainer = document.createElement(`div`);\n        const taskTitle = document.createElement(`h3`);\n        const taskDueDate = document.createElement(`p`);\n        const taskDescription = document.createElement(`p`);\n        const taskPriorityStatus = document.createElement(`p`);\n        const taskProjectAssociated = document.createElement(`p`);\n        const taskEditButton = document.createElement(`button`);\n        const taskDeleteButton = document.createElement(`button`);\n        \n        newTaskContainer.classList.add(`task-container`);\n        newTaskContainer.setAttribute(`data-index-number`, `${arrayOfTaskObjects[i].taskIndex}`);\n        taskTitle.textContent = arrayOfTaskObjects[i].taskTitle;\n        taskDueDate.textContent = arrayOfTaskObjects[i].taskDateDue;\n        taskDescription.textContent = arrayOfTaskObjects[i].taskDescription;\n        taskPriorityStatus.textContent = arrayOfTaskObjects[i].taskPriorityStatus;\n        taskProjectAssociated.textContent = arrayOfTaskObjects[i].taskProjectAssociated;\n        taskEditButton.textContent = `edit`;\n        taskEditButton.classList.add(`edit-task-btn`);\n        taskDeleteButton.textContent = `delete`;\n        taskDeleteButton.classList.add(`delete-task-btn`);\n\n        newTaskContainer.appendChild(taskTitle);\n        newTaskContainer.appendChild(taskDueDate);\n        newTaskContainer.appendChild(taskDescription);\n        newTaskContainer.appendChild(taskPriorityStatus);\n        newTaskContainer.appendChild(taskProjectAssociated);\n        newTaskContainer.appendChild(taskEditButton);\n        newTaskContainer.appendChild(taskDeleteButton);\n\n        allTasksContainer.appendChild(newTaskContainer);\n    }\n    \n    container.appendChild(allTasksContainer);\n    return container\n}\n\nfunction displayProject(projectObject) {\n    const projectContainer = document.createElement(`div`);\n    const projectTitle = document.createElement(`h2`);\n    const projectDueDate = document.createElement(`p`);\n    const projectDescription = document.createElement(`p`);\n    const projectEditButton = document.createElement(`button`);\n    const projectDeleteButton = document.createElement(`button`);\n    \n    projectContainer.classList.add(`project-container`);\n    projectContainer.setAttribute(`data-index-number`, `${projectObject.projectIndex}`);\n    projectTitle.textContent = projectObject.projectTitle;\n    projectDueDate.textContent = projectObject.projectDateDue;\n    projectDescription.textContent = projectObject.projectDescription;\n    projectEditButton.textContent = `edit project`;\n    projectDeleteButton.textContent = `delete project`;\n    projectEditButton.setAttribute(`id`, `edit-project-btn`);\n    projectDeleteButton.setAttribute(`id`, `delete-project-btn`);\n\n    projectContainer.appendChild(projectTitle);\n    projectContainer.appendChild(projectDueDate);\n    projectContainer.appendChild(projectDescription);\n    projectContainer.appendChild(projectEditButton);\n    projectContainer.appendChild(projectDeleteButton);\n\n    return projectContainer\n}\n\nfunction displayExistingProject(projectToDisplayObject, projectTasksArray) {\n    const projectContainerDisplayed = displayProject(projectToDisplayObject);\n    const projectTasks = displayTasks(projectTasksArray, projectContainerDisplayed);\n    return projectTasks\n}\n\n// this \"module\" re-loads the buttons and selectors every pageLoad with updated projectsCreated data\nfunction projectButtonsAndSelectorsHandler(projectsCreatedArray) {\n    const projectListHead = document.querySelector(`#project-list`);\n    const addTaskProjectSelector = document.querySelector(`#project-associated`);\n    const editTaskProjectSelector = document.querySelector(`#edit-project-associated`);\n    const projectsArray = projectsCreatedArray;\n\n    function removeExistingElements(projectList, addSelector, editSelector) {\n        const arrayOfContainers = [projectList, addSelector, editSelector];\n\n        arrayOfContainers.forEach( (container) => {\n            while (container.firstChild) {\n                container.removeChild(container.firstChild)\n            }\n        })\n    }\n\n    function appendProjectButtonsToProjectList() {\n\n        projectsArray.forEach( (projectObject) => {\n            const newProjectButton = document.createElement(`button`);\n            newProjectButton.textContent = projectObject.projectTitle;\n            newProjectButton.setAttribute(`id`, projectObject.projectTitle);\n            newProjectButton.setAttribute(`data-index-number`, projectObject.projectIndex);\n            \n            projectListHead.appendChild(newProjectButton);\n        })\n    }\n\n    function appendProjectsToSelectors() {\n        const defaultProjectForAddTaskSelector = document.createElement(`option`);\n        defaultProjectForAddTaskSelector.setAttribute(`value`, `default`);\n        defaultProjectForAddTaskSelector.textContent = `overview (default)`;\n        addTaskProjectSelector.appendChild(defaultProjectForAddTaskSelector);\n        \n        const defaultProjectForEditTaskSelector = document.createElement(`option`);\n        defaultProjectForEditTaskSelector.setAttribute(`value`, `default`);\n        defaultProjectForEditTaskSelector.textContent = `overview (default)`;\n        editTaskProjectSelector.appendChild(defaultProjectForEditTaskSelector);\n        \n        projectsArray.forEach( (projectObject) => {\n            const projectForAddTaskSelector = document.createElement(`option`);\n            projectForAddTaskSelector.setAttribute(`value`, projectObject.projectTitle);\n            projectForAddTaskSelector.textContent = projectObject.projectTitle;\n            \n            const projectForEditTaskSelector = document.createElement(`option`);\n            projectForEditTaskSelector.setAttribute(`value`, projectObject.projectTitle);\n            projectForEditTaskSelector.textContent = projectObject.projectTitle;\n        \n            addTaskProjectSelector.appendChild(projectForAddTaskSelector);\n            editTaskProjectSelector.appendChild(projectForEditTaskSelector);\n        })\n    }\n    removeExistingElements(projectListHead, addTaskProjectSelector, editTaskProjectSelector);\n    appendProjectButtonsToProjectList();\n    appendProjectsToSelectors();\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/displayNewItems.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pageLoad_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pageLoad.js */ \"./src/pageLoad.js\");\n/* harmony import */ var _taskCreation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./taskCreation.js */ \"./src/taskCreation.js\");\n/* harmony import */ var _displayNewItems_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./displayNewItems.js */ \"./src/displayNewItems.js\");\n\n\n\n\nconst navContainer = document.querySelector(`#nav-container`);\nconst projectButton = document.querySelector(`#project-button`);\nconst projectListContainer = document.querySelector(`#project-list`);\n\nnavContainer.addEventListener(`click`, pageSelector);\nprojectButton.addEventListener(`click`, (e) => console.log(e.target.textContent));\nprojectListContainer.addEventListener(`click`, projectSelector);\n\nconst loadPage = (function() {\n    const currentObjectArray = (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_1__.getObjectArrays)();\n    (0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_2__.loadMainContent)(currentObjectArray.projects, null, currentObjectArray.tasks, `overview`);\n})();\n\nfunction pageSelector(e) {\n    const pageSelectedTitle = e.target.textContent;\n    if (pageSelectedTitle === `overview`) {\n        const currentObjectArray = (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_1__.getObjectArrays)();\n        (0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_2__.loadMainContent)(currentObjectArray.projects, null, currentObjectArray.tasks, pageSelectedTitle);\n    }\n}\n\nfunction projectSelector(e) {\n    const currentObjectArray = (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_1__.getObjectArrays)();\n    const projectClickedTitle = e.target.textContent;\n    const projectClickedIndex = e.target.dataset.indexNumber;\n    \n    let associatedTasksToLoad = [];\n    currentObjectArray.tasks.filter( (taskObject) => {\n        if (taskObject.taskProjectAssociated === projectClickedTitle) {\n            associatedTasksToLoad.push(taskObject);\n        }\n    })\n\n    ;(0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_2__.loadMainContent)(currentObjectArray.projects, currentObjectArray.projects[projectClickedIndex], associatedTasksToLoad, projectClickedTitle);\n}\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/pageLoad.js":
/*!*************************!*\
  !*** ./src/pageLoad.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _taskCreation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./taskCreation.js */ \"./src/taskCreation.js\");\n\n\n// module contains functions to open, close and submit addTask and addProject form modals\nconst newObjectModalModule = (function() {\n\n    const addTaskContainer = document.querySelector(`#add-task-container`);\n    addTaskContainer.addEventListener(`click`, openNewObjectModal);\n    \n    const projectUserInput = document.querySelectorAll(`.projectUserInputs`);\n    const taskUserInput = document.querySelectorAll(`.taskUserInputs`);\n    \n    function openNewObjectModal(e) {\n        const addObjectModal = document.querySelectorAll(`.modal`);\n        if (e.target.id === `addTaskButton`) {\n            addObjectModal[0].style.display = `block`;\n        } else {\n            addObjectModal[2].style.display = `block`;\n        }\n    }\n    \n    const submitProjectButton = document.querySelector(`#addProjectSubmitButton`);\n    const submitTaskButton = document.querySelector(`#addTaskSubmitButton`);\n    const cancelProjectButton = document.querySelector(`#cancelProject`);\n    const cancelTaskButton = document.querySelector(`#cancelTask`);\n    \n    cancelProjectButton.addEventListener(`click`, (e) => closeNewObjectModal(e.target.id));\n    cancelTaskButton.addEventListener(`click`, (e) => closeNewObjectModal(e.target.id));\n    \n    submitProjectButton.addEventListener(`click`, (e) => {\n        if (checkFormValidation(projectUserInput)) {\n            (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.instantiateNewProject)(projectUserInput);\n            submitNewObjectForm(e);\n        }\n    })\n    \n    submitTaskButton.addEventListener(`click`, (e) => {\n        if (checkFormValidation(taskUserInput)) {\n            (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.instantiateNewTask)(taskUserInput);\n            submitNewObjectForm(e);\n        }\n    })\n    \n    function submitNewObjectForm(event) {\n        event.preventDefault();\n        closeNewObjectModal(event.target.id);\n    }\n    \n    function closeNewObjectModal(buttonID) {\n        const modalToClose = document.querySelectorAll(`.modal`);\n        const formToReset = document.querySelectorAll(`.formField`);\n        if (buttonID === `addProjectSubmitButton` || buttonID === `cancelProject`) {\n            modalToClose[2].style.display = `none`;\n            formToReset[2].reset();\n        } else {\n            modalToClose[0].style.display = `none`;\n            formToReset[0].reset();\n        }\n    }\n})();\n\n// module contains functions to open, close and submit editTask and editProject form modals\nconst editObjectModalModule = (function() {\n    const mainContainer = document.querySelector(`#main-content`);\n    mainContainer.addEventListener(`click`, (e) => {\n        const currentPage = mainContainer.firstChild.firstChild.textContent;\n        if (e.target.className === `edit-task-btn`) {\n            const taskSelectedIndex = e.target.parentElement.dataset.indexNumber;\n            openEditTaskModal(taskSelectedIndex, currentPage);\n        } else if (e.target.className === `delete-task-btn`) {\n            const taskSelectedIndex = e.target.parentElement.dataset.indexNumber;\n            (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.deleteTaskObject)(taskSelectedIndex, currentPage);\n        } else if (e.target.id === `edit-project-btn`) {\n            const projectSelectedTitle = e.target.parentNode.firstChild.textContent;\n            const projectSelectedIndex = e.target.parentElement.dataset.indexNumber;\n            openEditProjectModal(projectSelectedTitle, projectSelectedIndex);\n        } else if (e.target.id === `delete-project-btn`) {\n            const projectSelectedTitle = e.target.parentNode.firstChild.textContent;\n            const projectSelectedIndex = e.target.parentElement.dataset.indexNumber;\n            openDeleteProjectModal(projectSelectedTitle, projectSelectedIndex);\n        }\n    });\n\n    function openEditTaskModal(taskToEditIndex, pageDisplayedTitle) {\n        \n        const currentObjectArray = (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.getObjectArrays)();\n        \n        const editTaskModal = document.querySelector(`#editTaskModal`);\n        editTaskModal.style.display = `block`;\n        \n        // pre-populate the text inputs with existing data\n        const editTaskInputs = document.querySelectorAll(`.editTaskInputs`);\n        editTaskInputs[0].setAttribute(`value`, `${currentObjectArray.tasks[taskToEditIndex].taskTitle}`);\n        editTaskInputs[1].setAttribute(`value`, `${currentObjectArray.tasks[taskToEditIndex].taskDateDue}`);\n        editTaskInputs[2].setAttribute(`value`, `${currentObjectArray.tasks[taskToEditIndex].taskDescription}`);\n        \n        const confirmEdits = document.querySelector(`#editTaskSubmitButton`);\n        confirmEdits.addEventListener(`click`, (e) => {\n            if (checkFormValidation(editTaskInputs)) {\n                (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.finalizeTaskEdits)(editTaskInputs, taskToEditIndex, pageDisplayedTitle);\n                e.preventDefault();\n                closeEditOrDeleteModal(editTaskModal);\n            }\n        });\n        \n        const cancelTaskEdits = document.querySelector(`#cancelTaskEdit`);\n        cancelTaskEdits.addEventListener(`click`, (e) => {\n            e.preventDefault();\n            closeEditOrDeleteModal(editTaskModal);\n        })\n    }\n\n    function openEditProjectModal(projectToEditTitle, projectToEditIndex) {\n        \n        const currentObjectArray = (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.getObjectArrays)();\n\n        const editProjectModal = document.querySelector(`#editProjectModal`);\n        editProjectModal.style.display = `block`;\n        \n        // pre-populate the edit form with existing data\n        const editProjectInputs = document.querySelectorAll(`.editProjectInputs`);\n        editProjectInputs[0].setAttribute(`value`, `${currentObjectArray.projects[projectToEditIndex].projectTitle}`);\n        editProjectInputs[1].setAttribute(`value`, `${currentObjectArray.projects[projectToEditIndex].projectDateDue}`);\n        editProjectInputs[2].setAttribute(`value`, `${currentObjectArray.projects[projectToEditIndex].projectDescription}`);\n        \n        const confirmEdits = document.querySelector(`#editProjectSubmitButton`);\n        confirmEdits.addEventListener(`click`, (e) => {\n            if (checkFormValidation(editProjectInputs)) {\n                (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.finalizeProjectEdits)(editProjectInputs, projectToEditIndex, projectToEditTitle);\n                e.preventDefault();\n                closeEditOrDeleteModal(editProjectModal);\n            }\n        });\n        \n        const cancelProjectEdits = document.querySelector(`#cancelProjectEdit`);\n        cancelProjectEdits.addEventListener(`click`, (e) => {\n            e.preventDefault();\n            closeEditOrDeleteModal(editProjectModal);\n        })\n        \n    }\n\n    function openDeleteProjectModal(projectToDeleteTitle, projectToDeleteIndex) {\n        console.log(projectToDeleteIndex);\n        \n        const deleteProjectModal = document.querySelector(`#confirmDeleteProject`)\n        const deleteProjectMessage = document.querySelector(`#confirm-delete-text`);\n        deleteProjectMessage.textContent = `Are you sure you want to delete the project \"${projectToDeleteTitle}\" and all of its tasks?`;\n        \n        const confirmDeleteButton = document.querySelector(`#confirmProjectDelete`);\n        const cancelDeleteButton = document.querySelector(`#cancelProjectDelete`);\n        \n        confirmDeleteButton.addEventListener( `click`, (e) => {\n            closeEditOrDeleteModal(deleteProjectModal);\n            (0,_taskCreation_js__WEBPACK_IMPORTED_MODULE_0__.deleteProjectObject)(projectToDeleteTitle, projectToDeleteIndex);\n        })\n        \n        cancelDeleteButton.addEventListener( `click`, (e) => {\n            closeEditOrDeleteModal(deleteProjectModal);\n        })\n        \n        deleteProjectModal.style.display = `block`;\n    }\n\n    function closeEditOrDeleteModal(modalToClose) {\n        const formToReset = document.querySelectorAll(`.formField`);\n        modalToClose.style.display = `none`;\n        if (modalToClose === editTaskModal) {\n            formToReset[1].reset();\n        } else if (modalToClose === editProjectModal) {\n            formToReset[3].reset();\n        }\n    }\n})();\n\nfunction checkFormValidation(inputNodeList) {\n    let isValid = true;\n    inputNodeList.forEach( inputField => {\n        if (inputField.validity.valueMissing) {\n            isValid = false;\n        }\n    })\n    return isValid\n}\n\n//# sourceURL=webpack://todo-list/./src/pageLoad.js?");

/***/ }),

/***/ "./src/taskCreation.js":
/*!*****************************!*\
  !*** ./src/taskCreation.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getObjectArrays\": () => (/* binding */ getObjectArrays),\n/* harmony export */   \"instantiateNewTask\": () => (/* binding */ instantiateNewTask),\n/* harmony export */   \"instantiateNewProject\": () => (/* binding */ instantiateNewProject),\n/* harmony export */   \"finalizeTaskEdits\": () => (/* binding */ finalizeTaskEdits),\n/* harmony export */   \"finalizeProjectEdits\": () => (/* binding */ finalizeProjectEdits),\n/* harmony export */   \"deleteTaskObject\": () => (/* binding */ deleteTaskObject),\n/* harmony export */   \"deleteProjectObject\": () => (/* binding */ deleteProjectObject)\n/* harmony export */ });\n/* harmony import */ var _displayNewItems_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./displayNewItems.js */ \"./src/displayNewItems.js\");\n\n\nlet projectsCreated = [\n    {\n        projectTitle: `todo list`,\n        projectDateDue: `2021-06-20`,\n        projectDescription: `this is a project for the odin project`,\n        projectIndex: 0,\n    },\n    {\n        projectTitle: `keep grinding`,\n        projectDateDue: `2021-06-20`,\n        projectDescription: `this is a test project for my buggy todo list app`,\n        projectIndex: 1,\n    },\n];\n\nlet tasksCreated = [\n    {\n        taskTitle: `refactor code`,\n        taskDateDue: `2021-06-20`,\n        taskDescription: `this is a test`,\n        taskPriorityStatus: `high`,\n        taskProjectAssociated: `todo list`,\n        taskIndex: 0,\n    },\n    {\n        taskTitle: `make progress`,\n        taskDateDue: `2021-06-12`,\n        taskDescription: `this is a test`,\n        taskPriorityStatus: `high`,\n        taskProjectAssociated: `todo list`,\n        taskIndex: 1,\n    },\n    {\n        taskTitle: `do more`,\n        taskDateDue: `2021-06-13`,\n        taskDescription: `this is a test`,\n        taskPriorityStatus: `high`,\n        taskProjectAssociated: `default`,\n        taskIndex: 2,\n    }\n];\n\nfunction getObjectArrays() {\n    const taskArrays = {\n        projects: projectsCreated,\n        tasks: tasksCreated\n    }\n    return taskArrays\n}\n\nclass Project {\n    constructor(projectTitle, projectDateDue, projectDescription, projectIndex) {\n        this.projectTitle = projectTitle;\n        this.projectDateDue = projectDateDue;\n        this.projectDescription = projectDescription;\n        this.projectIndex = projectIndex;\n    }\n}\n\nclass Task {\n    constructor(taskTitle, taskDateDue, taskDescription, taskPriorityStatus, taskProjectAssociated, taskIndex) {\n        this.taskTitle = taskTitle;\n        this.taskDateDue = taskDateDue;\n        this.taskDescription = taskDescription;\n        this.taskPriorityStatus = taskPriorityStatus;\n        this.taskProjectAssociated = taskProjectAssociated;\n        this.taskIndex = taskIndex;\n    }\n}\n\nfunction instantiateNewTask(newTaskModalInputs, pageToRefresh) {\n    \n    const newTaskInputArray = Array.from(newTaskModalInputs);\n    const newTaskTitle = newTaskInputArray[0].value;\n    const newTaskDateDue = newTaskInputArray[1].value;\n    const newTaskDescription = newTaskInputArray[2].value;\n    const newTaskPriorityStatus = newTaskInputArray[3].value;\n    const newTaskProjectAssociated = newTaskInputArray[4].value;\n    const newTaskIndex = tasksCreated.length;\n    \n    const newTask = new Task(newTaskTitle, newTaskDateDue, newTaskDescription, newTaskPriorityStatus, newTaskProjectAssociated, newTaskIndex);\n    tasksCreated.push(newTask);\n\n    const projectAssociatedToLoad = projectsCreated.find(object => object.projectTitle === newTaskProjectAssociated);\n    const tasksToLoad = taskFilter(newTaskProjectAssociated);\n    \n    loadContentHelper(projectAssociatedToLoad, tasksToLoad);\n}\n        \nfunction instantiateNewProject(newProjectModalInputs) {\n    const newProjectInputArray = Array.from(newProjectModalInputs);\n    const newProjectTitle = newProjectInputArray[0].value;\n    const newProjectDateDue = newProjectInputArray[1].value;\n    const newProjectDescription = newProjectInputArray[2].value;\n    const newProjectIndex = projectsCreated.length;\n    \n    const newProject = new Project(newProjectTitle, newProjectDateDue, newProjectDescription, newProjectIndex);\n    projectsCreated.push(newProject);\n\n    (0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_0__.loadMainContent)(projectsCreated, newProject, null, `new project`);\n}\n\nfunction finalizeTaskEdits(editModalInputs, targetIndex, currentPageDisplayed) {\n    const editedTaskTitle = editModalInputs[0].value;\n    const editedTaskDateDue = editModalInputs[1].value;\n    const editedTaskDescription = editModalInputs[2].value;\n    const editedTaskPriorityStatus = editModalInputs[3].value;\n    const editedTaskProjectAssocaited = editModalInputs[4].value;\n\n    tasksCreated[targetIndex].taskTitle = editedTaskTitle;\n    tasksCreated[targetIndex].taskDateDue = editedTaskDateDue;\n    tasksCreated[targetIndex].taskDescription = editedTaskDescription;\n    tasksCreated[targetIndex].taskPriorityStatus = editedTaskPriorityStatus;\n    tasksCreated[targetIndex].taskProjectAssociated = editedTaskProjectAssocaited;\n\n    const projectAssociatedToLoad = projectsCreated.find(object => object.projectTitle === currentPageDisplayed);\n    const tasksToLoad = taskFilter(currentPageDisplayed);\n\n    loadContentHelper(projectAssociatedToLoad, tasksToLoad);\n}\n\nfunction deleteTaskObject(indexOfTaskToDelete, currentPageDisplayed) {\n    tasksCreated.splice(indexOfTaskToDelete, 1);\n    updateTaskIndex(indexOfTaskToDelete, currentPageDisplayed);\n}\n\nfunction updateTaskIndex(indexOfTaskToDelete, currentPageDisplayed) {\n    for (let i = indexOfTaskToDelete; i < tasksCreated.length; i++) {\n        tasksCreated[i].taskIndex = i;\n    }\n    const projectAssociatedToLoad = projectsCreated.find(object => object.projectTitle === currentPageDisplayed);\n    const tasksToLoad = taskFilter(currentPageDisplayed);\n\n    loadContentHelper(projectAssociatedToLoad, tasksToLoad);\n}\n\nfunction finalizeProjectEdits(editProjectModalInputs, targetProjectIndex, existingProjectTitle) {\n\n    let tasksToLoad = null;\n    const editedProjectTitle = editProjectModalInputs[0].value;\n    const editedProjectDateDue = editProjectModalInputs[1].value;\n    const editedProjectDescription = editProjectModalInputs[2].value;\n\n    projectsCreated[targetProjectIndex].projectTitle = editedProjectTitle;\n    projectsCreated[targetProjectIndex].projectDateDue = editedProjectDateDue;\n    projectsCreated[targetProjectIndex].projectDescription = editedProjectDescription\n\n    if (editedProjectTitle !== existingProjectTitle) {\n        tasksToLoad = taskFilter(existingProjectTitle);\n        tasksToLoad.forEach( taskObject => {\n            taskObject.taskProjectAssociated = editedProjectTitle;\n        })\n    } else {\n        tasksToLoad = taskFilter(existingProjectTitle);\n    }\n\n    loadContentHelper(projectsCreated[targetProjectIndex], tasksToLoad);\n}\n\nfunction deleteProjectObject(projectToDeleteTitle, projectToDeleteIndex) {\n    let taskIndexForDeletion = [];\n    tasksCreated.filter( (object, index) => {\n        if (object.taskProjectAssociated === projectToDeleteTitle) {\n            taskIndexForDeletion.push(index);\n        }\n    })\n    // deletes the tasks associated with the deleted project and updates the remaining task indices\n    for (let i = taskIndexForDeletion.length; i >= 1; i--) {\n        tasksCreated.splice(taskIndexForDeletion[i-1], 1);\n        for (let j = i - 1; j < tasksCreated.length; j++) {\n            tasksCreated[j].taskIndex = j;\n        }\n    }\n\n    projectsCreated.splice(projectToDeleteIndex, 1);\n\n    updateProjectIndex(projectToDeleteIndex);\n}\n\nfunction updateProjectIndex(indexOfDeletedProject) {\n    for (let i = indexOfDeletedProject; i < projectsCreated.length; i++) {\n        projectsCreated[i].projectIndex = i;\n    }\n\n    loadContentHelper(null, tasksCreated);\n}\n\nfunction taskFilter(projectAssociatedTitle) {\n    let tasksAssociated = [];\n    tasksCreated.filter( (taskObject) => {\n        if (taskObject.taskProjectAssociated === projectAssociatedTitle) {\n            tasksAssociated.push(taskObject);\n        }\n    })\n    return tasksAssociated\n}\n\nfunction loadContentHelper(projectObjectToLoad, tasksArrayToLoad) {\n    if (!projectObjectToLoad) {\n        (0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_0__.loadMainContent)(projectsCreated, null, tasksCreated, `overview`);\n    } else {\n        (0,_displayNewItems_js__WEBPACK_IMPORTED_MODULE_0__.loadMainContent)(projectsCreated, projectObjectToLoad, tasksArrayToLoad, projectObjectToLoad.projectTitle);\n    }\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/taskCreation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;